require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe BookmarksController do

  # This should return the minimal set of attributes required to create a valid
  # Bookmark. As you add validations to Bookmark, be sure to
  # adjust the attributes here as well.

  def create_bookmark
    FactoryGirl.create(:bookmark, user: @user)
  end

  before(:each) do
    login_user
  end
 
  describe "Access to bookmarks for anonymous users" do
    it "redirects to login page" do
      sign_out @user 

      requests = [
        lambda { get :index, {} },
        lambda { post :create, { name: "xx", url: "www.ww.edu" } }
      ]

      requests.each do |request|
          response = request.call
          response.status.should be 302
          response.should redirect_to new_user_session_path
      end
    end
  end

  describe "GET index" do
    it "returns empty list of bookmarks if nothing was added" do
      get :index, {}
      assigns(:bookmarks).should eq([])
    end

    it "returns bookmark after the user added it" do
      bookmark = create_bookmark 
      get :index, {}
      assigns(:bookmarks).should eq([bookmark])
    end

    it "returns all bookmarks after the user added them" do
      bookmarks = []
      3.times { bookmarks.push create_bookmark } 
      get :index, {}
      assigns(:bookmarks).should eq(bookmarks)
    end

  end

  describe "GET new" do
    it "assigns a new bookmark as @bookmark" do
      get :new, {}
      assigns(:bookmark).should be_a_new(Bookmark)
    end
  end

  describe "GET edit" do
    it "assigns the requested bookmark as @bookmark" do
      bookmark = create_bookmark 
      get :edit, {:id => bookmark.to_param}
      assigns(:bookmark).should eq(bookmark)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Bookmark" do
        expect {
          post :create, {:bookmark => FactoryGirl.attributes_for(:bookmark) }
        }.to change(Bookmark, :count).by(1)
      end
      it "assigns a newly created bookmark as @bookmark" do
        post :create, {:bookmark => FactoryGirl.attributes_for(:bookmark) }
        assigns(:bookmark).should be_a(Bookmark)
        assigns(:bookmark).should be_persisted
      end
      it "redirects to the bookmark list" do
        post :create, {:bookmark => FactoryGirl.attributes_for(:bookmark)}
        response.should redirect_to(bookmarks_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved bookmark as @bookmark" do
        # Trigger the behavior that occurs when invalid params are submitted
        Bookmark.any_instance.stub(:save).and_return(false)
        post :create, {:bookmark => { "name" => "" }}
        assigns(:bookmark).should be_a_new(Bookmark)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Bookmark.any_instance.stub(:save).and_return(false)
        post :create, {:bookmark => { "name" => "" }}
        response.should render_template("new")
      end
    end

  end

  describe "PUT update" do
    before(:each) do
      @bookmark = create_bookmark
    end

    def send_put_request(valid)
      @new_attrs = FactoryGirl.attributes_for(:bookmark, user: @user, name:"New name")
      if not valid
        @new_attrs[:name] = ""
        @new_attrs[:url] = ""
      end
      put :update, {:id => @bookmark, :bookmark => @new_attrs}
    end

    context "with valid params" do
      before(:each) do
        send_put_request(valid=true)
      end
      it "locates the requested bookmark" do
        assigns(:bookmark).should eq(@bookmark)
      end
      it "changes the bookmark attributes" do
         @bookmark.reload
         @bookmark.name.should eq(@new_attrs[:name])
      end
      it "redirects to the bookmark list" do
        response.should redirect_to(bookmarks_path)
      end
    end
    
    context "with invalid params" do
      before(:each) do
        send_put_request(valid=false)
      end
      it "does not change the bookmark attributes" do
         @bookmark.reload
         @bookmark.name.should_not eq(@new_attrs[:name])
      end
      it "redirects to the bookmark list" do
        response.should render_template(:edit)
      end
    end

  end

  describe "DELETE destroy" do
    it "destroys the requested bookmark" do
      bookmark = create_bookmark 
      expect {
        delete :destroy, {:id => bookmark.to_param}
      }.to change(Bookmark, :count).by(-1)
    end

    it "redirects to the bookmarks list" do
      bookmark = create_bookmark
      delete :destroy, {:id => bookmark}
      response.should redirect_to(bookmarks_path)
    end
  end

=begin
  # I still need to think what to do with the SHOW request. Maybe redirect to the URL?
  describe "GET show" do
    it "assigns the requested bookmark as @bookmark" do
      bookmark = Bookmark.create! valid_attributes
      get :show, {:id => bookmark.to_param}, valid_session
      assigns(:bookmark).should eq(bookmark)
    end
  end

=end
end
